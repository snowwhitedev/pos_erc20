{
  "address": "0xe713913A2Ae49E617587fCfF2b57B48977c6Bf47",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_SB_TOKEN",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferSB",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SB_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "buyCredit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBuyCreditNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permitSBToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0af766e048579e63506cfab81aa78292138c50ac2dfe64841b169fbfb53b73d",
  "receipt": {
    "to": null,
    "from": "0xD69C2Ac9b708217bCDfD932e4d24e024E1eE5D8E",
    "contractAddress": "0xe713913A2Ae49E617587fCfF2b57B48977c6Bf47",
    "transactionIndex": 112,
    "gasUsed": "903658",
    "logsBloom": "0x
    "blockHash": "0x1c3c487a053ef0811f7b1a834df32e10fd8a1c6b0d3882387f5342907c71fa41",
    "transactionHash": "0xb0af766e048579e63506cfab81aa78292138c50ac2dfe64841b169fbfb53b73d",
    "logs": [],
    "blockNumber": 16911530,
    "cumulativeGasUsed": "11567720",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x40f906e19b14100d5247686e08053c4873c66192"
  ],
  "solcInputHash": "a06ec985fcb02fcfad811d64df54ab1c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SB_TOKEN\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSB\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SB_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBuyCreditNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitSBToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BuyCredit.sol\":\"BuyCredit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/BuyCredit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./EIP712MetaTransaction.sol\\\";\\nimport \\\"./interfaces/ISugarBounceToken.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract BuyCredit is EIP712MetaTransaction(\\\"BuyCredit\\\", \\\"1\\\"), ReentrancyGuard {\\n    using Address for address;\\n    address public immutable SB_TOKEN;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _BUY_CREDIT_TYPEHASH =\\n        keccak256(\\\"BuyCredit(address from,address to,uint256 amount,uint256 deadline,uint256 salt)\\\");\\n\\n    mapping(address => uint256) private nonces;\\n\\n    event TransferSB(address indexed from, address indexed to, uint256 amount);\\n\\n    constructor(address _SB_TOKEN) {\\n        require(_SB_TOKEN.isContract(), \\\"It should be deployed smart contract\\\");\\n        SB_TOKEN = _SB_TOKEN;\\n    }\\n\\n    function getBuyCreditNonces(address user) external view returns (uint256) {\\n        return nonces[user];\\n    }\\n\\n    function permitSBToken(\\n        address owner,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        ISugarBounceToken(SB_TOKEN).permit(owner, address(this), value, deadline, v, r, s);\\n    }\\n\\n    function buyCredit(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external nonReentrant {\\n        require(deadline > block.timestamp, \\\"Transfer signature is expired\\\");\\n\\n        bytes32 msgHash = keccak256(abi.encode(_BUY_CREDIT_TYPEHASH, from, to, amount, deadline, nonces[from]));\\n\\n        // bytes32 msgHash = keccak256(abi.encodePacked(productName));\\n        bytes32 digest = toTypedMessageHash(msgHash);\\n        // (bytes32 r, bytes32 s, uint8 v) = splitSignature(sig);\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n        require(recoveredAddress == from, \\\"Invalid signer dfgdgdfgdf\\\");\\n\\n        TransferHelper.safeTransferFrom(SB_TOKEN, from, to, amount);\\n\\n        nonces[from]++;\\n\\n        emit TransferSB(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x70a12654afdaf986aa80f1e78da671ce4f7fa073eff63022b1df0ae589dd0041\",\"license\":\"GPL-3.0\"},\"contracts/EIP712MetaTransaction.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./libraries/EIP712Base.sol\\\";\\n\\ncontract EIP712MetaTransaction is EIP712Base {\\n    bytes32 private constant META_TRANSACTION_TYPEHASH =\\n        keccak256(bytes(\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"));\\n\\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\n    mapping(address => uint256) private nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    constructor(string memory name, string memory version) EIP712Base(name, version) {}\\n\\n    function convertBytesToBytes4(bytes memory inBytes) internal pure returns (bytes4 outBytes4) {\\n        if (inBytes.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            outBytes4 := mload(add(inBytes, 32))\\n        }\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        bytes4 destinationFunctionSig = convertBytesToBytes4(functionSignature);\\n        require(destinationFunctionSig != msg.sig, \\\"functionSignature can not be of executeMetaTransaction method\\\");\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n        require(verify(userAddress, metaTx, sigR, sigS, sigV), \\\"Signer and signature do not match\\\");\\n        nonces[userAddress] = nonces[userAddress] + 1;\\n        // Append userAddress at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\n\\n        require(success, \\\"Function call not successful\\\");\\n        emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(META_TRANSACTION_TYPEHASH, metaTx.nonce, metaTx.from, keccak256(metaTx.functionSignature)));\\n    }\\n\\n    function getNonce(address user) external view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address user,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        address signer = ecrecover(toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS);\\n        require(signer != address(0), \\\"Invalid signature\\\");\\n        return signer == user;\\n    }\\n\\n    function msgSender() internal view returns (address sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n}\\n\",\"keccak256\":\"0x94076f5ae695d735f53c8e7e11de88eb9b3e87ec2f1317d7441c26e5ec070088\",\"license\":\"MIT\"},\"contracts/interfaces/ISugarBounceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ISugarBounceToken {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9987e63c38ec774ce2ee02ab0704148b303ab00365974c51dae702364c9eac26\",\"license\":\"MIT\"},\"contracts/libraries/EIP712Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ncontract EIP712Base {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(bytes(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"));\\n\\n    bytes32 internal domainSeparator;\\n\\n    constructor(string memory name, string memory version) {\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                address(this),\\n                bytes32(getChainID())\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function getDomainSeparator() private view returns (bytes32) {\\n        return domainSeparator;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), messageHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3fba1d1debaba993345f2b067d2e5b5105aacd98b82ceba7df321c73c08c98f2\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5b9ec6afc7f05fda0e2075104c2269dece8d6b1fbac7876cb33bc0cb9ab778ad\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040527fd7a0599d9fff7fede7d490cf3a6bd013b327251dc415fcceddc8342bcc1cf91260a05234801561003457600080fd5b506040516110f63803806110f6833981016040819052610053916101c5565b60405180604001604052806009815260200168109d5e50dc99591a5d60ba1b815250604051806040016040528060018152602001603160f81b81525081816040518060800160405280604f81526020016110a7604f91398051906020012082805190602001208280519060200120306100d06101b260201b60201c565b60408051602081019690965285019390935260608401919091526001600160a01b0316608083015260a082015260c00160408051601f198184030181529190528051602091820120600055600160025561014194506001600160a01b038616935061078e6101b6821b17901c915050565b61019d5760405162461bcd60e51b8152602060048201526024808201527f49742073686f756c64206265206465706c6f79656420736d61727420636f6e746044820152631c9858dd60e21b606482015260840160405180910390fd5b60601b6001600160601b0319166080526101f3565b4690565b6001600160a01b03163b151590565b6000602082840312156101d6578081fd5b81516001600160a01b03811681146101ec578182fd5b9392505050565b60805160601c60a051610e7e61022960003960006104f601526000818161014101528181610632015261072a0152610e7e6000f3fe6080604052600436106100655760003560e01c806356e26fa41161004357806356e26fa4146100f957806393ef42c91461012f578063b2df2d201461017b57600080fd5b80630c53c51c1461006a5780632060653d146100935780632d0335ab146100b5575b600080fd5b61007d610078366004610b59565b61019b565b60405161008a9190610d63565b60405180910390f35b34801561009f57600080fd5b506100b36100ae366004610af0565b610430565b005b3480156100c157600080fd5b506100eb6100d0366004610acf565b6001600160a01b031660009081526001602052604090205490565b60405190815260200161008a565b34801561010557600080fd5b506100eb610114366004610acf565b6001600160a01b031660009081526003602052604090205490565b34801561013b57600080fd5b506101637f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161008a565b34801561018757600080fd5b506100b3610196366004610c38565b6106e0565b606060006101a88661079d565b90506000357fffffffff00000000000000000000000000000000000000000000000000000000908116908216141561024d5760405162461bcd60e51b815260206004820152603d60248201527f66756e6374696f6e5369676e61747572652063616e206e6f74206265206f662060448201527f657865637574654d6574615472616e73616374696f6e206d6574686f6400000060648201526084015b60405180910390fd5b604080516060810182526001600160a01b0389166000818152600160209081529084902054835282015290810187905261028a88828888886107b9565b6102e05760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b6064820152608401610244565b6001600160a01b03881660009081526001602081905260409091205461030591610d76565b6001600160a01b038916600090815260016020908152604080832093909355915190918291309161033a918c918e9101610cf7565b60408051601f198184030181529082905261035491610cdb565b6000604051808303816000865af19150503d8060008114610391576040519150601f19603f3d011682016040523d82523d6000602084013e610396565b606091505b5091509150816103e85760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c000000006044820152606401610244565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b8a338b60405161041b93929190610d2e565b60405180910390a19998505050505050505050565b6002805414156104825760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610244565b600280554284116104d55760405162461bcd60e51b815260206004820152601d60248201527f5472616e73666572207369676e617475726520697320657870697265640000006044820152606401610244565b6001600160a01b0387811660008181526003602090815260408083205481517f0000000000000000000000000000000000000000000000000000000000000000938101939093529082019390935292891660608401526080830188905260a0830187905260c08301919091529060e0016040516020818303038152906040528051906020012090506000610568826108a1565b6040805160008082526020820180845284905260ff89169282019290925260608101879052608081018690529192509060019060a0016020604051602081039080840390855afa1580156105c0573d6000803e3d6000fd5b505050602060405103519050896001600160a01b0316816001600160a01b03161461062d5760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964207369676e65722064666764676466676466000000000000006044820152606401610244565b6106597f00000000000000000000000000000000000000000000000000000000000000008b8b8b6108e3565b6001600160a01b038a16600090815260036020526040812080549161067d83610dbe565b9190505550886001600160a01b03168a6001600160a01b03167fbeaa4063d20755a1e9aec940c1c1ba37df9265ca42bd1756e925dd4f891a20988a6040516106c791815260200190565b60405180910390a3505060016002555050505050505050565b60405163d505accf60e01b81526001600160a01b038781166004830152306024830152604482018790526064820186905260ff8516608483015260a4820184905260c482018390527f0000000000000000000000000000000000000000000000000000000000000000169063d505accf9060e401600060405180830381600087803b15801561076e57600080fd5b505af1158015610782573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b03163b151590565b60008151600014156107b157506000919050565b506020015190565b60008060016107cf6107ca88610a42565b6108a1565b6040805160008152602081018083529290925260ff861690820152606081018790526080810186905260a0016020604051602081039080840390855afa15801561081d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166108805760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610244565b866001600160a01b0316816001600160a01b03161491505095945050505050565b6000805460405161190160f01b60208201526022810191909152604281018390526062015b604051602081830303815290604052805190602001209050919050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052915160009283929088169161095c9190610cdb565b6000604051808303816000865af19150503d8060008114610999576040519150601f19603f3d011682016040523d82523d6000602084013e61099e565b606091505b50915091508180156109c85750805115806109c85750808060200190518101906109c89190610c8f565b610a3a5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608401610244565b505050505050565b6000604051806080016040528060438152602001610e0660439139805160209182012083518483015160408087015180519086012090516108c6950193845260208401929092526001600160a01b03166040830152606082015260800190565b80356001600160a01b0381168114610ab957600080fd5b919050565b803560ff81168114610ab957600080fd5b600060208284031215610ae0578081fd5b610ae982610aa2565b9392505050565b600080600080600080600060e0888a031215610b0a578283fd5b610b1388610aa2565b9650610b2160208901610aa2565b95506040880135945060608801359350610b3d60808901610abe565b925060a0880135915060c0880135905092959891949750929550565b600080600080600060a08688031215610b70578081fd5b610b7986610aa2565b9450602086013567ffffffffffffffff80821115610b95578283fd5b818801915088601f830112610ba8578283fd5b813581811115610bba57610bba610def565b604051601f8201601f19908116603f01168101908382118183101715610be257610be2610def565b816040528281528b6020848701011115610bfa578586fd5b8260208601602083013791820160200185905250955050506040860135925060608601359150610c2c60808701610abe565b90509295509295909350565b60008060008060008060c08789031215610c50578182fd5b610c5987610aa2565b95506020870135945060408701359350610c7560608801610abe565b92506080870135915060a087013590509295509295509295565b600060208284031215610ca0578081fd5b81518015158114610ae9578182fd5b60008151808452610cc7816020860160208601610d8e565b601f01601f19169290920160200192915050565b60008251610ced818460208701610d8e565b9190910192915050565b60008351610d09818460208801610d8e565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b60006001600160a01b03808616835280851660208401525060606040830152610d5a6060830184610caf565b95945050505050565b602081526000610ae96020830184610caf565b60008219821115610d8957610d89610dd9565b500190565b60005b83811015610da9578181015183820152602001610d91565b83811115610db8576000848401525b50505050565b6000600019821415610dd257610dd2610dd9565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a26469706673582212205829f1e50c295bd886b316acc256768f4216f30fe8d7988ce872e884f458b08a64736f6c63430008040033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429",
  "deployedBytecode": "0x6080604052600436106100655760003560e01c806356e26fa41161004357806356e26fa4146100f957806393ef42c91461012f578063b2df2d201461017b57600080fd5b80630c53c51c1461006a5780632060653d146100935780632d0335ab146100b5575b600080fd5b61007d610078366004610b59565b61019b565b60405161008a9190610d63565b60405180910390f35b34801561009f57600080fd5b506100b36100ae366004610af0565b610430565b005b3480156100c157600080fd5b506100eb6100d0366004610acf565b6001600160a01b031660009081526001602052604090205490565b60405190815260200161008a565b34801561010557600080fd5b506100eb610114366004610acf565b6001600160a01b031660009081526003602052604090205490565b34801561013b57600080fd5b506101637f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161008a565b34801561018757600080fd5b506100b3610196366004610c38565b6106e0565b606060006101a88661079d565b90506000357fffffffff00000000000000000000000000000000000000000000000000000000908116908216141561024d5760405162461bcd60e51b815260206004820152603d60248201527f66756e6374696f6e5369676e61747572652063616e206e6f74206265206f662060448201527f657865637574654d6574615472616e73616374696f6e206d6574686f6400000060648201526084015b60405180910390fd5b604080516060810182526001600160a01b0389166000818152600160209081529084902054835282015290810187905261028a88828888886107b9565b6102e05760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b6064820152608401610244565b6001600160a01b03881660009081526001602081905260409091205461030591610d76565b6001600160a01b038916600090815260016020908152604080832093909355915190918291309161033a918c918e9101610cf7565b60408051601f198184030181529082905261035491610cdb565b6000604051808303816000865af19150503d8060008114610391576040519150601f19603f3d011682016040523d82523d6000602084013e610396565b606091505b5091509150816103e85760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c000000006044820152606401610244565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b8a338b60405161041b93929190610d2e565b60405180910390a19998505050505050505050565b6002805414156104825760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610244565b600280554284116104d55760405162461bcd60e51b815260206004820152601d60248201527f5472616e73666572207369676e617475726520697320657870697265640000006044820152606401610244565b6001600160a01b0387811660008181526003602090815260408083205481517f0000000000000000000000000000000000000000000000000000000000000000938101939093529082019390935292891660608401526080830188905260a0830187905260c08301919091529060e0016040516020818303038152906040528051906020012090506000610568826108a1565b6040805160008082526020820180845284905260ff89169282019290925260608101879052608081018690529192509060019060a0016020604051602081039080840390855afa1580156105c0573d6000803e3d6000fd5b505050602060405103519050896001600160a01b0316816001600160a01b03161461062d5760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964207369676e65722064666764676466676466000000000000006044820152606401610244565b6106597f00000000000000000000000000000000000000000000000000000000000000008b8b8b6108e3565b6001600160a01b038a16600090815260036020526040812080549161067d83610dbe565b9190505550886001600160a01b03168a6001600160a01b03167fbeaa4063d20755a1e9aec940c1c1ba37df9265ca42bd1756e925dd4f891a20988a6040516106c791815260200190565b60405180910390a3505060016002555050505050505050565b60405163d505accf60e01b81526001600160a01b038781166004830152306024830152604482018790526064820186905260ff8516608483015260a4820184905260c482018390527f0000000000000000000000000000000000000000000000000000000000000000169063d505accf9060e401600060405180830381600087803b15801561076e57600080fd5b505af1158015610782573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b03163b151590565b60008151600014156107b157506000919050565b506020015190565b60008060016107cf6107ca88610a42565b6108a1565b6040805160008152602081018083529290925260ff861690820152606081018790526080810186905260a0016020604051602081039080840390855afa15801561081d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166108805760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610244565b866001600160a01b0316816001600160a01b03161491505095945050505050565b6000805460405161190160f01b60208201526022810191909152604281018390526062015b604051602081830303815290604052805190602001209050919050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052915160009283929088169161095c9190610cdb565b6000604051808303816000865af19150503d8060008114610999576040519150601f19603f3d011682016040523d82523d6000602084013e61099e565b606091505b50915091508180156109c85750805115806109c85750808060200190518101906109c89190610c8f565b610a3a5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608401610244565b505050505050565b6000604051806080016040528060438152602001610e0660439139805160209182012083518483015160408087015180519086012090516108c6950193845260208401929092526001600160a01b03166040830152606082015260800190565b80356001600160a01b0381168114610ab957600080fd5b919050565b803560ff81168114610ab957600080fd5b600060208284031215610ae0578081fd5b610ae982610aa2565b9392505050565b600080600080600080600060e0888a031215610b0a578283fd5b610b1388610aa2565b9650610b2160208901610aa2565b95506040880135945060608801359350610b3d60808901610abe565b925060a0880135915060c0880135905092959891949750929550565b600080600080600060a08688031215610b70578081fd5b610b7986610aa2565b9450602086013567ffffffffffffffff80821115610b95578283fd5b818801915088601f830112610ba8578283fd5b813581811115610bba57610bba610def565b604051601f8201601f19908116603f01168101908382118183101715610be257610be2610def565b816040528281528b6020848701011115610bfa578586fd5b8260208601602083013791820160200185905250955050506040860135925060608601359150610c2c60808701610abe565b90509295509295909350565b60008060008060008060c08789031215610c50578182fd5b610c5987610aa2565b95506020870135945060408701359350610c7560608801610abe565b92506080870135915060a087013590509295509295509295565b600060208284031215610ca0578081fd5b81518015158114610ae9578182fd5b60008151808452610cc7816020860160208601610d8e565b601f01601f19169290920160200192915050565b60008251610ced818460208701610d8e565b9190910192915050565b60008351610d09818460208801610d8e565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b60006001600160a01b03808616835280851660208401525060606040830152610d5a6060830184610caf565b95945050505050565b602081526000610ae96020830184610caf565b60008219821115610d8957610d89610dd9565b500190565b60005b83811015610da9578181015183820152602001610d91565b83811115610db8576000848401525b50505050565b6000600019821415610dd257610dd2610dd9565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a26469706673582212205829f1e50c295bd886b316acc256768f4216f30fe8d7988ce872e884f458b08a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4296,
        "contract": "contracts/BuyCredit.sol:BuyCredit",
        "label": "domainSeparator",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 3710,
        "contract": "contracts/BuyCredit.sol:BuyCredit",
        "label": "nonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 739,
        "contract": "contracts/BuyCredit.sol:BuyCredit",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3529,
        "contract": "contracts/BuyCredit.sol:BuyCredit",
        "label": "nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}